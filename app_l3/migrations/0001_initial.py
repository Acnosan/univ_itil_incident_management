# Generated by Django 5.0.2 on 2024-04-25 21:39

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254)),
                ('password', models.CharField(max_length=100)),
                ('number', models.IntegerField()),
                ('is_observer', models.BooleanField(default=False, null=True)),
                ('is_self_service', models.BooleanField(default=False, null=True)),
                ('is_technician', models.BooleanField(default=False, null=True)),
                ('is_active', models.BooleanField(default=True, null=True)),
                ('is_superuser', models.BooleanField(default=False, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user_table',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CategoryModel',
            fields=[
                ('category_name', models.CharField(choices=[('hardware', 'Hardware'), ('software', 'Software'), ('network', 'Network'), ('printer', 'Printer'), ('phone', 'Phone'), ('laptop', 'Laptop')], max_length=150, primary_key=True, serialize=False, unique=True)),
                ('description', models.TextField()),
                ('category_creation_date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'category_table',
            },
        ),
        migrations.CreateModel(
            name='PriorityModel',
            fields=[
                ('priority_name', models.CharField(choices=[('veryhigh', 'Very High'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], max_length=150, primary_key=True, serialize=False, unique=True)),
                ('description', models.TextField()),
                ('priority_creation_date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'priority_table',
            },
        ),
        migrations.CreateModel(
            name='StatusModel',
            fields=[
                ('status_name', models.CharField(choices=[('pending', 'Pending'), ('ongoing', 'Ongoing'), ('solved', 'Solved'), ('closed', 'Closed')], max_length=150, primary_key=True, serialize=False, unique=True)),
                ('description', models.TextField()),
                ('status_creation_date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'status_table',
            },
        ),
        migrations.CreateModel(
            name='AdminModel',
            fields=[
                ('username', models.CharField(max_length=150, unique=True)),
                ('admin_as_user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('creation_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'admin_table',
            },
        ),
        migrations.CreateModel(
            name='ObserverModel',
            fields=[
                ('username', models.CharField(max_length=150, unique=True)),
                ('observer_as_user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('creation_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'observer_table',
            },
        ),
        migrations.CreateModel(
            name='SelfServiceModel',
            fields=[
                ('username', models.CharField(max_length=150, unique=True)),
                ('self_service_as_user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('creation_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'self_service_table',
            },
        ),
        migrations.CreateModel(
            name='TechnicianModel',
            fields=[
                ('username', models.CharField(max_length=150, unique=True)),
                ('tech_as_user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('creation_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'technician_table',
            },
        ),
        migrations.CreateModel(
            name='TicketsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, unique=True)),
                ('description', models.TextField()),
                ('attachment', models.FileField(blank=True, null=True, upload_to='app_l3/ticket_attachments/')),
                ('ticket_creation_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_l3.categorymodel')),
                ('priority', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_l3.prioritymodel')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_l3.statusmodel')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_l3.technicianmodel')),
            ],
            options={
                'db_table': 'tickets_table',
            },
        ),
        migrations.CreateModel(
            name='TicketSolutionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_description', models.TextField()),
                ('ticket_solution_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('confirmed_solution', models.BooleanField(default=False)),
                ('targeted_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_l3.ticketsmodel')),
                ('solution_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app_l3.technicianmodel')),
            ],
            options={
                'db_table': 'tickets_solutions_table',
            },
        ),
        migrations.CreateModel(
            name='TicketSolutionAttachmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='downloaded_solutions/')),
                ('targeted_solution', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app_l3.ticketsolutionmodel')),
            ],
            options={
                'db_table': 'tickets_solutions_attachment_table',
            },
        ),
    ]
